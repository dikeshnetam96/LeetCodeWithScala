[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\c14473b\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\c14473b\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.2 (Oracle Corporation Java 20.0.2)
[debug]       Load.loadUnit: plugins took 155.9594ms
[debug]       Load.loadUnit: defsScala took 0.5073ms
[debug] [Loading] Scanning directory C:\Users\c14473b\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\c14473b\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 39.7572 ms
[debug]           Load.resolveProject(global-plugins) took 83.8385ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\c14473b\.sbt\1.0\plugins, plugins: List(<none>))) took 155.1319ms
[debug] [Loading] Done in C:\Users\c14473b\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 194.8757ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.6151ms
[debug]     Load.loadUnit(file:/C:/Users/c14473b/.sbt/1.0/plugins/, ...) took 368.5774ms
[debug]   Load.apply: load took 679.7646ms
[debug]   Load.apply: resolveProjects took 14.3281ms
[debug]   Load.apply: finalTransforms took 123.9846ms
[debug]   Load.apply: config.delegates took 26.3195ms
[debug]   Load.apply: Def.make(settings)... took 663.8697ms
[debug]   Load.apply: structureIndex took 141.297ms
[debug]   Load.apply: mkStreams took 1.7977ms
[info] loading global plugins from C:\Users\c14473b\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3540.7237ms
[debug]           Load.loadUnit: plugins took 33.5322ms
[debug]           Load.loadUnit: defsScala took 0.0101ms
[debug] [Loading] Scanning directory C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1\project
[debug]             Load.loadUnit: mkEval took 7.9423ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8435 ms
[info] loading settings for project leetcodewithscala1-build from idea.sbt ...
[debug]               Load.resolveProject(leetcodewithscala1-build) took 4.0655ms
[debug]             Load.loadTransitive: finalizeProject(Project(id leetcodewithscala1-build, base: C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1\project, plugins: List(<none>))) took 6.4993ms
[debug] [Loading] Done in C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1\project, returning: (leetcodewithscala1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2904.4768ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.9916ms
[debug]         Load.loadUnit(file:/C:/Users/c14473b/Documents/IntelliJScalaProject/LeetCodeWithScala1/project/, ...) took 2949.0413ms
[debug]       Load.apply: load took 2951.3032ms
[debug]       Load.apply: resolveProjects took 0.1673ms
[debug]       Load.apply: finalTransforms took 13.8224ms
[debug]       Load.apply: config.delegates took 0.4918ms
[debug]       Load.apply: Def.make(settings)... took 107.0595ms
[debug]       Load.apply: structureIndex took 40.0109ms
[debug]       Load.apply: mkStreams took 0.004ms
[info] loading project definition from C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4441.7592ms
[debug]     Load.loadUnit: defsScala took 0.0067ms
[debug] [Loading] Scanning directory C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1
[debug]       Load.loadUnit: mkEval took 0.4889ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.1071 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 45.9057ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1, plugins: List(<none>))) took 53.0083ms
[debug] [Loading] Done in C:\Users\c14473b\Documents\IntelliJScalaProject\LeetCodeWithScala1, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2152.2535ms
[debug]     Load.loadUnit: cleanEvalClasses took 74.8705ms
[debug]   Load.loadUnit(file:/C:/Users/c14473b/Documents/IntelliJScalaProject/LeetCodeWithScala1/, ...) took 6670.9712ms
[debug] Load.apply: load took 6673.6728ms
[debug] Load.apply: resolveProjects took 0.1906ms
[debug] Load.apply: finalTransforms took 38.6222ms
[debug] Load.apply: config.delegates took 0.4582ms
[debug] Load.apply: Def.make(settings)... took 131.932ms
[debug] Load.apply: structureIndex took 40.4173ms
[debug] Load.apply: mkStreams took 0.0045ms
[info] set current project to LeetCodeWithScala (in build file:/C:/Users/c14473b/Documents/IntelliJScalaProject/LeetCodeWithScala1/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60039 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60039, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to LeetCodeWithScala (in build file:/C:/Users/c14473b/Documents/IntelliJScalaProject/LeetCodeWithScala1/)
[debug] > Exec(idea-shell, None, None)
